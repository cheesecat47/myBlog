<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.github.cheesecat47.myBlog.post.model.mapper.PostMapper">

    <!-- 댓글 개수 세는 쿼리문 공통으로 사용되므로 분리 -->
    <sql id="getNumOfComments">
        select count(*)
        from Comment c,
             User u
        where c.post_id = Post.id
          and u.id = User.id
    </sql>

    <!--  PostDto도 공통으로 사용되므로 분리 -->
    <resultMap id="PostDtoMap" type="PostDto">
        <result property="postId" column="id"/>
        <result property="categoryId" column="category_id"/>
        <result property="categoryName" column="category_name"/>
        <result property="title" column="title"/>
        <result property="createdAt" column="created_at"/>
        <result property="hit" column="hit"/>
        <result property="excerpt" column="excerpt"/>
        <result property="content" column="content"/>
        <result property="numOfComments" column="num_of_comments"/>
        <association property="author" column="author" javaType="AuthorDto">
            <result property="userId" column="id_str"/>
            <result property="nickName" column="name"/>
        </association>
    </resultMap>

    <!--  getPosts 쿼리 -->
    <select id="getPosts" parameterType="GetPostsRequest" resultMap="PostDtoMap">
        select Post.id,
               Post.category_id,
               Category.name                                                  as category_name,
               Post.title,
               User.id_str,
               User.name,
               DATE_FORMAT(Post.created_at, '%Y-%m-%dT%TZ')                   as created_at,
               Post.hit,
               ifnull(Post.excerpt, concat(substr(Post.content, 197), '...')) as excerpt, -- 본문이 200자보다 길다면 197자까지 자르고 '...' 붙이기
               (<include refid="getNumOfComments"/>)                           as num_of_comments
        from myBlog.Post
                 left outer join myBlog.User on Post.user_id = User.id
                 left outer join myBlog.Category on Post.category_id = Category.id
        where Post.deleted_at is null -- 삭제된 글 정보 제외
          <if test="userId != null">
              and myBlog.User.id_str = #{userId}
          </if>
          <if test="categoryName != null">
            and Category.name = #{categoryName}
          </if>
        order by
          <if test="order == 'latest'">
            Post.created_at desc
          </if>
          <if test="order == 'oldest'">
            Post.created_at asc
          </if>
          <if test="order == 'popular'">
            Post.hit desc, Post.created_at desc
          </if>
        limit #{offset}, #{limit};
    </select>

    <!--  getPostByTitle 쿼리 -->
    <select id="getPostByTitle" parameterType="String" resultMap="PostDtoMap">
        select Post.id,
               Post.category_id,
               Category.name                                                  as category_name,
               Post.title,
               User.id_str,
               User.name,
               DATE_FORMAT(Post.created_at, '%Y-%m-%dT%TZ')                   as created_at,
               Post.hit,
               ifnull(Post.excerpt, concat(substr(Post.content, 197), '...')) as excerpt,
               Post.content,
               (<include refid="getNumOfComments"/>)                           as num_of_comments
        from myBlog.Post
                 left outer join myBlog.User on Post.user_id = User.id
                 left outer join myBlog.Category on Post.category_id = Category.id
        where Post.title = #{postTitle}
          and Post.deleted_at is null;
    </select>

    <sql id="getUserId">
        select User.id
        from User
        where User.id_str = #{userId}
          and User.deleted_at is null
    </sql>

    <sql id="getCategoryId">
        select Category.id
        from Category
        where Category.name = #{categoryName}
        and Category.blog_id = (<include refid="getUserId"/>)
        and Category.deleted_at is null
    </sql>

    <!-- createPost 쿼리 -->
    <insert id="createPost" parameterType="CreatePostRequestDto">
        insert into Post (category_id, user_id, title, excerpt, content)
        values ((<include refid="getCategoryId"/>),(<include refid="getUserId"/>), #{title}, #{excerpt}, #{content});
    </insert>

    <!-- updatePost 쿼리 -->
    <update id="updatePost" parameterType="UpdatePostRequestDto">
        <selectKey keyProperty="postId" resultType="String" order="BEFORE">
            select Post.id
            from Post
            where Post.user_id = (<include refid="getUserId"/>)
            and Post.title = #{postTitle}
            and Post.deleted_at is null
        </selectKey>
        update Post
        <trim prefix="set" suffixOverrides=",">
            <if test="newTitle != null">Post.title = #{newTitle},</if>
            <if test="categoryName != null">Post.category_id = (<include refid="getCategoryId"/>),</if>
            <if test="excerpt != null">Post.excerpt = #{excerpt},</if>
            <if test="content != null">Post.content = #{content},</if>
            Post.updated_at = now(),
        </trim>
        where Post.id = #{postId}
    </update>
</mapper>
