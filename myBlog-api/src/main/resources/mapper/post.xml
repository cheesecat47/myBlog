<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.github.cheesecat47.myBlog.post.model.mapper.PostMapper">

    <!--  getPosts 결과 매핑 -->
    <resultMap id="getPostsResultMap" type="PostDto">
        <result property="postId" column="id"/>
        <result property="categoryId" column="category_id"/>
        <result property="categoryName" column="category_name"/>
        <result property="title" column="title"/>
        <result property="createdAt" column="created_at"/>
        <result property="hit" column="hit"/>
        <result property="excerpt" column="excerpt"/>
        <result property="numOfComments" column="num_of_comments"/>
        <association property="author" column="author" javaType="AuthorDto">
            <result property="userId" column="id_str"/>
            <result property="nickName" column="name"/>
        </association>
    </resultMap>

    <!--  getPosts 쿼리 -->
    <select id="getPosts" parameterType="GetPostsRequest" resultMap="getPostsResultMap">
        select Post.id,
               Post.category_id,
               Category.name                                                  as category_name,
               Post.title,
               User.id_str,
               User.name,
               DATE_FORMAT(Post.created_at, '%Y-%m-%dT%TZ') as created_at,
               Post.hit,
               ifnull(Post.excerpt, concat(substr(Post.content, 197), '...')) as excerpt, -- 본문이 200자보다 길다면 197자까지 자르고 '...' 붙이기
               (select count(*)
                from Comment c,
                     User u
                where c.post_id = Post.id
                  and u.id = User.id)                                         as num_of_comments
        from myBlog.Post
                 left outer join myBlog.User on Post.user_id = User.id
                 left outer join myBlog.Category on Post.category_id = Category.id
        where Post.deleted_at is null -- 삭제된 글 정보 제외
          <if test="userId != null">
              and myBlog.User.id_str = #{userId}
          </if>
          <if test="categoryId > 0">
            and Category.id = #{categoryId}
          </if>
        order by
          <if test="order == 'latest'">
            Post.created_at desc
          </if>
          <if test="order == 'oldest'">
            Post.created_at asc
          </if>
          <if test="order == 'popular'">
            Post.hit desc, Post.created_at desc
          </if>
        limit #{offset}, #{limit};
    </select>

    <!--  getPostById 결과 매핑 -->
    <resultMap id="getPostByIdResultMap" type="PostDto">
        <result property="postId" column="post_id"/>
        <result property="categoryId" column="category_id"/>
        <result property="categoryName" column="category_name"/>
        <result property="title" column="title"/>
        <result property="createdAt" column="post_created_at"/>
        <result property="hit" column="hit"/>
        <result property="excerpt" column="excerpt"/>
        <result property="content" column="content"/>
        <association property="author" column="author" javaType="AuthorDto">
            <result property="userId" column="id_str"/>
            <result property="nickName" column="name"/>
        </association>
        <collection property="comments" column="comments" javaType="List" ofType="CommentDto">
            <result property="commentId" column="comment_id"/>
            <result property="userId" column="comment_user_id"/>
            <result property="content" column="comment_content"/>
            <result property="createdAt" column="comment_created_at"/>
        </collection>
    </resultMap>

    <!--  getPostById 쿼리 -->
    <select id="getPostById" parameterType="String" resultMap="getPostByIdResultMap">
        select Post.id                                                        as post_id,
               Post.category_id,
               Category.name                                                  as category_name,
               Post.title,
               User.id_str,
               User.name,
               DATE_FORMAT(Post.created_at, '%Y-%m-%dT%TZ')                   as post_created_at,
               Post.hit,
               ifnull(Post.excerpt, concat(substr(Post.content, 197), '...')) as excerpt,
               Post.content                                                   as post_content,
               Comment.id                                                     as comment_id,
               Comment.user_id                                                as comment_user_id,
               Comment.content                                                as comment_content,
               DATE_FORMAT(Comment.created_at, '%Y-%m-%dT%TZ')                as comment_created_at
        from myBlog.Post
                 left outer join myBlog.User on Post.user_id = User.id
                 left outer join myBlog.Category on Post.category_id = Category.id
                 left outer join myBlog.Comment on Comment.post_id = Post.id
        where myBlog.User.id_str = #{userId}
          and Post.id = #{postId}
          and User.deleted_at is null
          and Post.deleted_at is null
        order by comment_created_at desc;
    </select>

</mapper>
